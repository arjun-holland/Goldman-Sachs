/*
There are n soldiers standing in a line. Each soldier is assigned a unique rating value.
You have to form a team of 3 soldiers amongst them under the following rules:
Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).

Example :
Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 
*/

// class Solution {
// public:
//     int numTeams(vector<int>& rating) {
//         int c = 0,n = rating.size();
//         for(int i=0;i<n;i++){
//             for(int j=i+1;j<n;j++){
//                 for(int k=j+1;k<n;k++){
//                     if((rating[i] < rating[j] && rating[j]< rating[k]) || (rating[i] > rating[j] && rating[j] > rating[k])){
//                         c++;
//                     }
//                 }
//             }
//         }
//         return c;
//     }
// };

class Solution {
public:
    int numTeams(vector<int>& rating) {
        int n = rating.size(), res = 0;
        for (int j = 0; j < n; ++j) {
            int left_smaller = 0, left_greater = 0;
            int right_greater = 0, right_smaller = 0;

            for (int i = 0; i < j; ++i) {
                if (rating[i] < rating[j]) left_smaller++;
                if (rating[i] > rating[j]) left_greater++;
            }

            for (int k = j + 1; k < n; ++k) {
                if (rating[k] > rating[j]) right_greater++;
                if (rating[k] < rating[j]) right_smaller++;
            }
            res += left_smaller * right_greater + left_greater * right_smaller; //for all combinations
        }
        return res;
    }
};

Why It Works:
We compute for each soldier how many valid combinations they can be part of as the middle soldier.
Time complexity drops to O(n²) — much better for larger inputs.
