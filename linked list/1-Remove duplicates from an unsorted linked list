/*
Given an unsorted linked list. The task is to remove duplicate elements from this unsorted Linked List.
When a value appears in multiple nodes, the node which appeared first should be kept, all other duplicates are to be removed.

Input: LinkedList: 5->2->2->4
Output: 5->2->4
Explanation: Given linked list elements are 5->2->2->4, in which 2 is repeated only.
So, we will delete the extra repeated elements 2 from the linked list and the resultant linked list will contain 5->2->4
*/

/*
The structure of linked list is the following

struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/

class Solution {
  public:
    Node *removeDuplicates(Node *head) {
        unordered_set<int> seen;
        Node* c = head; //current
        Node* p = nullptr; //prev
        while(c != nullptr){
            if(seen.find(c->data) != seen.end()){
                p->next = c->next;
                delete c;
            }else{
                seen.insert(c->data);
                p = c;
            }
            c = p->next;
        }
        return head;
    }
};
